/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.gestioninventariomercado;
import java.io.*;

/**
 *
 * @author hugo
 */
public class VentanaMenuGestion extends javax.swing.JFrame {

    /**
     * Creates new form VentanaMenuGestion
     */
    
    private Tienda tienda; // atributo de clase
    private int opcion = -1;
    private boolean idiommenu = true; /*true Espaniol, false Ingles*/
     
    public VentanaMenuGestion() {
        initComponents();

        // Crear Tienda y cargar datos aquí
        tienda = new Tienda("Supermerca dos");

        File archivo = new File("inventario.txt");
        if (archivo.exists()) {
            try {
                tienda.cargarDatos("inventario.txt");
                TextAreaMiniTerminal.append("Datos cargados desde archivo\n");
            } catch (IOException e) {
                TextAreaMiniTerminal.append("Error al cargar archivo: " + e.getMessage() + "\n");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BtnMande = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextAreaMiniTerminal = new javax.swing.JTextArea();
        InputTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BtnMande.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        BtnMande.setText("Mande");
        BtnMande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMandeActionPerformed(evt);
            }
        });

        TextAreaMiniTerminal.setColumns(20);
        TextAreaMiniTerminal.setRows(5);
        jScrollPane1.setViewportView(TextAreaMiniTerminal);

        InputTextField.setToolTipText("escribe aqui..");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnMande))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnMande)
                    .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnMandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMandeActionPerformed
        // TODO add your handling code here:
        String entrada = InputTextField.getText();
        
        
        /*variables y clases a usar*/
        int codigo;
        String nombre;
        int cantidad;
        float precioVenta;
        String vendedor;
        float precioCompra;
        Seccion seccion;
        Producto producto;
        TextAreaMiniTerminal.setText("");
        
            if (idiommenu) {
                TextAreaMiniTerminal.append("----------SISTEMA DE GESTION DE INVENTARIO----------\n\n");
                TextAreaMiniTerminal.append("1: Agregar Producto\n");
                TextAreaMiniTerminal.append("2: Comprar Producto\n");
                TextAreaMiniTerminal.append("3: Vender Producto\n");
                TextAreaMiniTerminal.append("4: Listar Productos\n");
                TextAreaMiniTerminal.append("5: Buscar Producto\n");
                TextAreaMiniTerminal.append("6: Eliminar Producto\n");
                TextAreaMiniTerminal.append("7: Agregar Seccion\n");
                TextAreaMiniTerminal.append("8: Eliminar Seccion\n");
                TextAreaMiniTerminal.append("9: Change Language\n");
                TextAreaMiniTerminal.append("0: Salir\n\n");
            } else {
                TextAreaMiniTerminal.append("----------INVENTORY MANAGEMENT SYSTEM----------\n\n");
                TextAreaMiniTerminal.append("1: Add Product\n");
                TextAreaMiniTerminal.append("2: Buy Product\n");
                TextAreaMiniTerminal.append("3: Sell Product\n");
                TextAreaMiniTerminal.append("4: List Products\n");
                TextAreaMiniTerminal.append("5: Search Products\n");
                TextAreaMiniTerminal.append("6: Erase Products\n");
                TextAreaMiniTerminal.append("7: Add Section\n");
                TextAreaMiniTerminal.append("8: Erase Section\n");
                TextAreaMiniTerminal.append("9: Cambiar Idioma\n");
                TextAreaMiniTerminal.append("0: Exit\n\n");
            }
            
        if (entrada.isEmpty()) {
            TextAreaMiniTerminal.append("Por favor, ingrese un valor.\n");
            return; // no continuar
        }
        
            /*
            BufferedReader lector = new BufferedReader (new InputStreamReader(System.in));
            ingresado = entrada;
            ingresado = ingresado.trim()
            if (ingresado.equals("")) 
            {
                ingresado = "0";
            }
            */
            
            // lector para carácteres
            try {
            opcion = Integer.parseInt(entrada);
            } catch (NumberFormatException e) {
                TextAreaMiniTerminal.append("Por favor ingrese un número válido.\n");
                return;
            }
            
            /*
            if ( idiommenu ) { }else{
            }
            */
            switch(opcion){
                case 1:
                    tienda.printSecciones();
                    if ( idiommenu ) { TextAreaMiniTerminal.append("Ingrese de Que seccion es el Producto que desea Ingresar:");}else{
                    TextAreaMiniTerminal.append("Enter the section of the product you wish to enter:");}
                    
                    seccion = tienda.getSeccion(entrada);
                    if(seccion == null){
                        if ( idiommenu ) { TextAreaMiniTerminal.append("Error: Seccion no encontrada");}else{
                        TextAreaMiniTerminal.append("Error: Section not found"); }
                        
                    }else{
                        if ( idiommenu ) { TextAreaMiniTerminal.append("Ingrese Codigo del producto:");}else{
                        TextAreaMiniTerminal.append("Enter product code:"); }
                        codigo = Integer.parseInt(entrada);
                        
                        if ( idiommenu ) { TextAreaMiniTerminal.append("Ingrese Nombre del producto:");}else{
                        TextAreaMiniTerminal.append("Enter Product Name:"); }
                        nombre = entrada;
                        
                        if ( idiommenu ) {TextAreaMiniTerminal.append("Ingrese Cantidad de productos en Stock:"); }else{
                        TextAreaMiniTerminal.append("Enter Quantity of products in Stock:"); }
                        cantidad = Integer.parseInt(entrada);
                        
                        if ( idiommenu ) {TextAreaMiniTerminal.append("Ingrese Precio de Venta:"); }else{
                        TextAreaMiniTerminal.append("Enter Selling Price:"); }
                        
                        precioVenta = Float.parseFloat(entrada);
                        
                        if ( idiommenu ) {TextAreaMiniTerminal.append("Ingrese Nombre de Vendedor:"); }else{
                        TextAreaMiniTerminal.append("Enter Vendor Name:"); }
                        vendedor = entrada;
                        
                        if ( idiommenu ) {TextAreaMiniTerminal.append("Ingrese precio de Compra(Precio que se compra el producto al vendedor):"); }else{
                        TextAreaMiniTerminal.append("Enter the Purchase Price (Price at which the product is purchased from the seller):"); }
                        precioCompra = Float.parseFloat(entrada);
                        
                        producto = new Producto(nombre,cantidad,precioVenta,vendedor,precioCompra);
                        tienda.getSeccion(seccion.getNombreSeccion()).agregarProducto(codigo, producto);
                        
                    }
                    
                    break;
                
                case 2:
                    if ( idiommenu ) { TextAreaMiniTerminal.append("Ingrese Codigo del producto que desea comprar:");}else{
                    TextAreaMiniTerminal.append("Enter the code of the product you wish to purchase:"); }
                    codigo = Integer.parseInt(entrada);
                    Producto productocompra = tienda.getProductoEnSeccionPorCodigo(codigo);
                    TextAreaMiniTerminal.append(productocompra.toString());
                    
                    break;
                case 4:
                    tienda.printTienda();
                    
                    break;
                case 9:
                    idiommenu = !idiommenu;
                    if (idiommenu) {
                        TextAreaMiniTerminal.append("----------SISTEMA DE GESTION DE INVENTARIO----------\n\n");
                        TextAreaMiniTerminal.append("1: Agregar Producto\n");
                        TextAreaMiniTerminal.append("2: Comprar Producto\n");
                        TextAreaMiniTerminal.append("3: Vender Producto\n");
                        TextAreaMiniTerminal.append("4: Listar Productos\n");
                        TextAreaMiniTerminal.append("5: Buscar Producto\n");
                        TextAreaMiniTerminal.append("6: Eliminar Producto\n");
                        TextAreaMiniTerminal.append("7: Agregar Seccion\n");
                        TextAreaMiniTerminal.append("8: Eliminar Seccion\n");
                        TextAreaMiniTerminal.append("9: Change Language\n");
                        TextAreaMiniTerminal.append("0: Salir\n\n");
                    } else {
                        TextAreaMiniTerminal.append("----------INVENTORY MANAGEMENT SYSTEM----------\n\n");
                        TextAreaMiniTerminal.append("1: Add Product\n");
                        TextAreaMiniTerminal.append("2: Buy Product\n");
                        TextAreaMiniTerminal.append("3: Sell Product\n");
                        TextAreaMiniTerminal.append("4: List Products\n");
                        TextAreaMiniTerminal.append("5: Search Products\n");
                        TextAreaMiniTerminal.append("6: Erase Products\n");
                        TextAreaMiniTerminal.append("7: Add Section\n");
                        TextAreaMiniTerminal.append("8: Erase Section\n");
                        TextAreaMiniTerminal.append("9: Cambiar Idioma\n");
                        TextAreaMiniTerminal.append("0: Exit\n\n");
                    }
                    
                    break;
                case 0:
                    try {
                        tienda.guardarDatos("inventario.txt");
                        TextAreaMiniTerminal.append("Datos guardados correctamente\n");
                    } catch (IOException e) {
                        TextAreaMiniTerminal.append("Error al guardar archivo: " + e.getMessage() + "\n");
                    }

                    
                    break;
            }    
            
            if ( idiommenu ) { TextAreaMiniTerminal.append("Desea Hacer Otra Operacion?\n");}else{
            TextAreaMiniTerminal.append("Would you like to make another operation?\n");}
            
            TextAreaMiniTerminal.append("0: No\n");
            if ( idiommenu ) { TextAreaMiniTerminal.append("Cualquier otro numero: Si\n");}else{
            TextAreaMiniTerminal.append("Any other number: Yes\n"); }
            
            try {
            opcion = Integer.parseInt(entrada);
            } catch (NumberFormatException e) {
                TextAreaMiniTerminal.append("Por favor ingrese un número válido.\n");
                return;
            }
            
            if(opcion==0)
            {
                try {
                        tienda.guardarDatos("inventario.txt");
                        TextAreaMiniTerminal.append("Datos guardados correctamente\n");
                    } catch (IOException e) {
                        TextAreaMiniTerminal.append("Error al guardar archivo: " + e.getMessage() + "\n");
                    }
                System.exit(0);        // termina la aplicación
            }
    }//GEN-LAST:event_BtnMandeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaMenuGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaMenuGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaMenuGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaMenuGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaMenuGestion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnMande;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JTextArea TextAreaMiniTerminal;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
